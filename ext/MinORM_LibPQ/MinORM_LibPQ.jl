module MinORM_LibPQ
using MinORM, DotEnv, LibPQ, Pipe
import MinORM

function connectfromenv_postgresql()
    cfg=DotEnv.config().dict
    delete!(cfg, "DBMS")
    delete!(cfg, "db_path")
    if haskey(cfg, "db")
        cfg["dbname"]=pop!(cfg, "db")
    end
    if haskey(cfg, "passwd")
        cfg["password"]=pop!(cfg, "passwd")
    end
    connection_options_string=@pipe cfg|>
    collect|>
    map(x->join([x.first, x.second], "="), _)|>
    join(_, " ")
    LibPQ.Connection(connection_options_string)
end

MinORM.DBManager{:postgresql}()=MinORM.DBManager{:postgresql}(connectfromenv_postgresql())
MinORM.close!(manager::DBManager{:postgresql}, result::LibPQ.Result)=Base.close(result)
MinORM.close!(manager::DBManager{:postgresql}, statement::LibPQ.Statement)=begin
    MinORM.execute_core(manager, "DEALLOCATE $(statement.name);")
end
MinORM.render(manager::MinORM.DBManager{:postgresql}, statement::MinORM.StatementObject)=MinORM.render_postgresql(statement)
MinORM.generate_final_tabledata(manager::MinORM.DBManager{:postgresql}, intermediate)=MinORM.generate_final_tabledata_core(intermediate, ["primary key generated by default as identity", "primary key", "not null"])

end